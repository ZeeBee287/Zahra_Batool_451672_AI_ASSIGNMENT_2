#include <iostream> //necessary libraries
#include <queue>
#include <climits>
using namespace std; // C++ directive that tells the compiler to consider the identifiers defined in the std (standard) namespace

#define N 3 //N is set to 3, representing the size of the puzzle (3x3)

struct Node //Defines a structure Node to represent a state in the search space
{
    Node* parent; // declares a pointer member named parent inside the Node structur
    int mat[N][N]; //represents the puzzle state at a particular node
    int x, y; // declare integer members that represent the coordinates of the empty space 
    int cost; // declare integer member that represents the cost associated with reaching the current node
    int level; // declare integer member that represents the depth or level of the node in the search tree
};

int printMatrix(int mat[N][N]) // Function to print the puzzle matrix
{
    for (int i = 0; i < N; i++)
    {
        for (int j = 0; j < N; j++)
            printf("%d ", mat[i][j]);
        printf("\n");
    }
    return 0;
}

Node* newNode(int mat[N][N], int x, int y, int newX, int newY, int level, Node* parent) // Creates a new Node with the specified parameters
{
    Node* node = new Node;
    node->parent = parent;
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            node->mat[i][j] = mat[i][j];
        }
    }
    //    memcpy(node->mat, mat, sizeof node->mat);
    //    swap(node->mat[x][y], node->mat[newX][newY]);
    int temp = node->mat[x][y];
    node->mat[x][y] = node->mat[newX][newY];
    node->mat[newX][newY] = temp;
    node->cost = INT_MAX;
    node->level = level;
    node->x = newX;
    node->y = newY;
    return node;
}

int calculateCost(int mat[N][N], int final[N][N]) // Calculates the number of misplaced tiles between two matrices
{
    int count = 0;
    for (int i = 0; i < N; i++)
        for (int j = 0; j < N; j++)
            if (mat[i][j] && mat[i][j] != final[i][j])
                count++;
    return count;
}

int isSafe(int x, int y) // Checks if a given position is within the puzzle boundaries
{
    return (x >= 0 && x < N && y >= 0 && y < N);
}

void printPath(Node* root) // Recursively prints the path from the initial state to the current state
{
    if (root == NULL)
        return;
    printPath(root->parent);
    printMatrix(root->mat);
    printf("\n");
}

struct comp // Custom comparator for the priority queue in A* algorithm
{
    bool operator()(const Node* lhs, const Node* rhs) const
    {
        return (lhs->cost + lhs->level) > (rhs->cost + rhs->level);
    }
};

int row[] = { 1, 0, -1, 0 };
int col[] = { 0, -1, 0, 1 };

void solve(int initial[N][N], int x, int y, int final[N][N]) // The main function implementing the A* algorithm
{
    priority_queue<Node*, std::vector<Node*>, comp> pq;

    Node* root = newNode(initial, x, y, x, y, 0, NULL);
    root->cost = calculateCost(initial, final);
    pq.push(root);

    while (!pq.empty())
    {
        Node* min = pq.top();
        pq.pop();

        if (min->cost == 0)
        {
            printPath(min);
            return;
        }

        for (int i = 0; i < 4; i++)
        {
            if (isSafe(min->x + row[i], min->y + col[i]))
            {
                Node* child = newNode(min->mat, min->x, min->y, min->x + row[i], min->y + col[i], min->level + 1, min);
                child->cost = calculateCost(child->mat, final);
                pq.push(child);
            }
        }
    }
}

int main() // The main function where the initial and final states are defined, and the solve function is called
{
    int initial[N][N] =
    {
        {1, 2, 3},
        {5, 6, 0},
        {7, 8, 4}
    };

    int final[N][N] =
    {
        {0, 1, 2},
        {3, 4, 5},
        {6, 7, 8}
    };

    int x = 1, y = 2;

    solve(initial, x, y, final);

    return 0;
}
